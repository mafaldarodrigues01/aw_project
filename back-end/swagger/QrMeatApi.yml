openapi: 3.0.0
info:
  title: API Documentation
  description: API documentation for BE Services
  version: 1.0.0
servers:
  - url: https://api.example.com/v1
paths:
  /scan/{product_id}:
    get:
      tags:
        - Qrscan
      summary: Scan the meat and retrieve details
      description: Retrieves details of a meat product by scanning its QR code.
      parameters:
        - name: product_id
          in: path
          description: ID of the product to be scanned
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful scan of the product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid product ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: User isn't authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
  /news:
    get:
      tags:
        - News
      summary: Retrieve a list of news articles
      description: Retrieves a list of news articles.
      responses:
        '200':
          description: List of news articles retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        '401':
          description: User isn't authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '404':
          description: No news found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
  /news/{news_id}:
    get:
      tags:
        - News
      summary: Retrieve a specific news article
      description: Retrieves details of a specific news article by its ID.
      parameters:
        - name: news_id
          in: path
          description: ID of the news article to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Specified news article retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        '400':
          description: Invalid news ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: User isn't authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '404':
          description: News article not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
  /login:
    post:
      tags:
        - Authentication
      summary: Add new user
      requestBody:
        description: User object to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Login was successful, token returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
        '400':
          description: Invalid request data for login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid credentials, user is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Access forbidden, account may be blocked or restricted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
  /signup:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        description: User object to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User was successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signup'
        '400':
          description: Invalid user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorConflict'
  /product-categories:
    get:
      tags:
        - Product Categories
      summary: Retrieve product categories based on location
      parameters:
        - name: location
          in: query
          description: Location to filter product categories
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product categories retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategories'
        '400':
          description: Invalid location provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: User isn't authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
  /product-categories/{category_id}:
    get:
      tags:
        - Product Categories
      summary: Retrieve products under a specific category
      description: Retrieves a list of products that belong to a specific category.
      parameters:
        - name: category_id
          in: path
          description: ID of the category to retrieve products from
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Products under the category retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
        '400':
          description: Invalid category ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: User isn't authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
  /product-categories/product/{product_id}:
    get:
      tags:
        - Product
      summary: Retrieve product by product ID
      parameters:
        - name: product_id
          in: path
          description: ID of the product to retrieve the category for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        '400':
          $ref: "#/components/schemas/Error"
        '401':
          $ref: "#/components/schemas/ErrorUnauthorized"
        '404':
          $ref: "#/components/schemas/ErrorNotFound"

  /product-categories/product/{product_id}/details:
    get:
      tags:
        - Product
      summary: Retrieve product by product ID with details
      parameters:
        - name: product_id
          in: path
          description: ID of the product to retrieve the category for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        '400':
          $ref: "#/components/schemas/Error"
        '401':
          $ref: "#/components/schemas/ErrorUnauthorized"
        '404':
          $ref: "#/components/schemas/ErrorNotFound"
  /user/{user_id}:
    get:
      tags:
        - User
      summary: Retrieve user by ID
      parameters:
        - name: user_id
          in: path
          description: ID of the user to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          $ref: "#/components/schemas/Error"
        '401':
          $ref: "#/components/schemas/ErrorUnauthorized"
        '404':
          $ref: "#/components/schemas/ErrorNotFound"
  /user/{user_id}/picture:
    put:
      tags:
        - User
      summary: Updates user profile picture
      parameters:
        - name: user_id
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          $ref: "#/components/schemas/Error"
        '401':
          $ref: "#/components/schemas/ErrorUnauthorized"
        '404':
          $ref: "#/components/schemas/ErrorNotFound"
  /favorites:
    get:
      tags:
        - Favorites
      summary: Retrieve user's favorite items
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Favorites retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        '401':
          $ref: "#/components/schemas/ErrorUnauthorized"
  /favorites/{product_id}:
    post:
      tags:
        - Favorites
      summary: Add a product to user's favorites
      security:
        - BearerAuth: []
      parameters:
        - name: product_id
          in: path
          description: ID of the product to add to favorites
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product added to favorites successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        '400':
          $ref: "#/components/schemas/Error"
        '401':
          $ref: "#/components/schemas/ErrorUnauthorized"
        '404':
          $ref: "#/components/schemas/ErrorNotFound"
        '409':
          description: Product already in favorites
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorConflict"
    delete:
      tags:
        - Favorites
      summary: Remove a product from user's favorites
      security:
        - BearerAuth: []
      parameters:
        - name: product_id
          in: path
          description: ID of the product to remove from favorites
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product removed from favorites successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        '400':
          $ref: "#/components/schemas/Error"
        '401':
          $ref: "#/components/schemas/ErrorUnauthorized"
        '404':
          $ref: "#/components/schemas/ErrorNotFound"
  /product-categories/product/{product_id}/feedback:
    get:
      tags:
        - Feedback
      summary: Retrieve feedback for a specific product
      parameters:
        - name: product_id
          in: path
          description: ID of the product to retrieve feedback for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Feedback retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Feedback"
        '400':
          $ref: "#/components/schemas/Error"
        '404':
          $ref: "#/components/schemas/ErrorNotFound"
    post:
      tags:
        - Feedback
      summary: Add feedback for a specific product
      parameters:
        - name: product_id
          in: path
          description: ID of the product to add feedback for
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Feedback"
      responses:
        '201':
          description: Feedback added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feedback"
        '400':
          $ref: "#/components/schemas/Error"
        '404':
          $ref: "#/components/schemas/ErrorNotFound"

components:
  schemas:
    Product:
      type: object
      required:
        - product_id
        - producer
        - origin
        - sex
        - age
        - breed
        - description
      properties:
        product_id:
          type: integer
          format: int64
          description: Unique identifier for the product
        producer:
          type: string
          description: Meat producer
        origin:
          type: string
          description: Meat origin
        sex:
          type: string
          description: Animal sex
        age:
          type: integer
          format: int64
          description: Animal age
        breed:
          type: string
          description: Animal breed
        description:
          type: string
          description: Description of the product
    News:
      type: object
      properties:
        news_list:
          type: array
          items:
            $ref: '#/components/schemas/SingleNews'
    SingleNews:
      type: object
      required:
        - title
        - date
        - description
      properties:
        title:
          type: string
          description: Title of the news article
        date:
          type: string
          format: date-time
          description: Date of the news article
        description:
          type: string
          description: Description of the news article
    User:
      type: object
      properties:
        email:
          type: string
          description: Email address of the user
        username:
          type: string
          description: Username of the user
        password:
          type: string
          description: Password
    Feedback:
      type: object
      properties:
        rating:
          type: integer
          description: Rating given by the user (1-5)
        comment:
          type: string
          description: Comment provided by the use
        userId:
          type: string
          description: ID of the user who provided the feedback
    SuccessMessage:
      type: object
      properties:
        message:
          type: string
          description: Success message
    Error:
      type: object
      properties:
        code:
          type: integer
          description: Error code
        message:
          type: string
          description: Error message
    ErrorUnauthorized:
      type: object
      properties:
        code:
          type: integer
          description: Error code
        message:
          type: string
          description: Unauthorized access message
    ErrorNotFound:
      type: object
      properties:
        code:
          type: integer
          description: Error code
        message:
          type: string
          description: Not found error message
    Login:
      type: object
      properties:
        token:
          type: string
          description: Authentication token
    Signup:
      type: object
      properties:
        message:
          type: string
          description: Message confirming successful signup
    ProductCategories:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    Category:
      type: object
      properties:
        category_id:
          type: integer
          description: ID of the category
        category_name:
          type: string
          description: Name of the category
    Products:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    ErrorConflict:
      type: object
      properties:
        code:
          type: integer
          description: Error code
        message:
          type: string
          description: Conflict error message
    ErrorForbidden:
      type: object
      properties:
        code:
          type: integer
          description: Error code
        message:
          type: string
          description: Forbidden error message
